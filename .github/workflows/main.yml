name: Build Docker Image from External Repo

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 * * *"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      latest_commit: ${{ steps.setup-vars.outputs.LATEST_COMMIT }}
      latest_commit_short: ${{ steps.setup-vars.outputs.LATEST_COMMIT_SHORT }}
      cache_hit: ${{ steps.cache-tdlib.outputs.cache-hit }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get tdlib ref
        uses: octokit/request-action@v2.x
        id: get-tdlib-ref
        with:
          route: GET /repos/tdlib/td/branches/master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Cache tdlib
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: tdlib
          key: tdlib-${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}

      - name: Checkout tdlib
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}
          repository: tdlib/td
          token: ${{secrets.GITHUB_TOKEN}}
          path: tdlib

      - name: Setup variables
        id: setup-vars
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        run: |
          LATEST_COMMIT=${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}
          LATEST_COMMIT_SHORT=${LATEST_COMMIT:0:7}
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "LATEST_COMMIT_SHORT=$LATEST_COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "## TDLib Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: [\`${{ fromJson(steps.get-tdlib-ref.outputs.data).commit.sha }}\`](https://github.com/tdlib/td/commit/${{ fromJson(steps.get-tdlib-ref.outputs.data).commit.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- Short hash: \`${LATEST_COMMIT:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Cache hit: \`${{ steps.cache-tdlib.outputs.cache-hit }}\`" >> $GITHUB_STEP_SUMMARY

  build:
    needs: prepare
    if: needs.prepare.outputs.cache_hit != 'true' || github.event_name!='schedule'
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runs-on: [ubuntu-latest]
          - platform: arm64
            runs-on: [ubuntu-24.04-arm]
    runs-on: ${{ matrix.runs-on }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.latest_commit_short }}-alpine-${{ matrix.platform }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/${{ matrix.platform }}
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          context: ${{ inputs.context }}
          # Uncomment the following lines to enable build caching while ci debugging
          # cache-from: |
          #   type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-alpine-${{ matrix.platform }}
          # cache-to: |
          #   type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-alpine-${{ matrix.platform }},mode=max
          build-args: |
            TD_COMMIT=${{ needs.prepare.outputs.latest_commit }}

  merge:
    needs: [prepare, build]
    if: needs.prepare.outputs.cache_hit != 'true' || github.event_name!='schedule'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine \
            ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine-amd64 \
            ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine-arm64

      - name: Add image addresses to summary
        run: |
          echo "## Built Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-arch image: \`ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine\`" >> $GITHUB_STEP_SUMMARY
          echo "- AMD64 image: \`ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- ARM64 image: \`ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.latest_commit_short }}-alpine-arm64\`" >> $GITHUB_STEP_SUMMARY
